{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Avinash\\\\Documents\\\\hackathons\\\\Clone_fest\\\\image-gallery\\\\frontend\\\\src\\\\components\\\\ImageCropper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCropper = ({\n  imageSrc,\n  onCropComplete,\n  onCancel\n}) => {\n  _s();\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 90,\n    height: 90,\n    x: 5,\n    y: 5\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n  const imgRef = useRef(null);\n  const getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise(resolve => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        resolve(blob);\n      }, 'image/jpeg', 0.95);\n    });\n  };\n  const handleCropComplete = async () => {\n    if (imgRef.current && completedCrop) {\n      try {\n        const croppedImageBlob = await getCroppedImg(imgRef.current, completedCrop, 'cropped-image.jpg');\n        onCropComplete(croppedImageBlob);\n      } catch (error) {\n        console.error('Error cropping image:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cropper-modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cropper-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Crop Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cropper-container\",\n        children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n          crop: crop,\n          onChange: newCrop => setCrop(newCrop),\n          onComplete: c => setCompletedCrop(c),\n          aspect: 1 // Square aspect ratio, remove for freeform\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imgRef,\n            src: imageSrc,\n            alt: \"Crop preview\",\n            style: {\n              maxWidth: '100%',\n              maxHeight: '400px'\n            },\n            onLoad: () => setCrop({\n              unit: '%',\n              width: 90,\n              height: 90,\n              x: 5,\n              y: 5\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cropper-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onCancel,\n          className: \"btn\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCropComplete,\n          className: \"btn btn-primary\",\n          disabled: !completedCrop,\n          children: \"Apply Crop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCropper, \"z/T8BjZ8vNZI6r8j+GMTVKEdVcc=\");\n_c = ImageCropper;\nexport default ImageCropper;\nvar _c;\n$RefreshReg$(_c, \"ImageCropper\");","map":{"version":3,"names":["React","useState","useRef","ReactCrop","jsxDEV","_jsxDEV","ImageCropper","imageSrc","onCropComplete","onCancel","_s","crop","setCrop","unit","width","height","x","y","completedCrop","setCompletedCrop","imgRef","getCroppedImg","image","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","Promise","resolve","toBlob","blob","console","error","name","handleCropComplete","current","croppedImageBlob","className","children","_jsxFileName","lineNumber","columnNumber","onChange","newCrop","onComplete","c","aspect","ref","src","alt","style","maxWidth","maxHeight","onLoad","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Akshay Avinash/Documents/hackathons/Clone_fest/image-gallery/frontend/src/components/ImageCropper.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nconst ImageCropper = ({ imageSrc, onCropComplete, onCancel }) => {\r\n  const [crop, setCrop] = useState({ \r\n    unit: '%', \r\n    width: 90, \r\n    height: 90, \r\n    x: 5, \r\n    y: 5 \r\n  });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n  const imgRef = useRef(null);\r\n\r\n  const getCroppedImg = (image, crop, fileName) => {\r\n    const canvas = document.createElement('canvas');\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    return new Promise((resolve) => {\r\n      canvas.toBlob((blob) => {\r\n        if (!blob) {\r\n          console.error('Canvas is empty');\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        resolve(blob);\r\n      }, 'image/jpeg', 0.95);\r\n    });\r\n  };\r\n\r\n  const handleCropComplete = async () => {\r\n    if (imgRef.current && completedCrop) {\r\n      try {\r\n        const croppedImageBlob = await getCroppedImg(\r\n          imgRef.current,\r\n          completedCrop,\r\n          'cropped-image.jpg'\r\n        );\r\n        onCropComplete(croppedImageBlob);\r\n      } catch (error) {\r\n        console.error('Error cropping image:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cropper-modal\">\r\n      <div className=\"cropper-content\">\r\n        <h3>Crop Image</h3>\r\n        <div className=\"cropper-container\">\r\n          <ReactCrop\r\n            crop={crop}\r\n            onChange={(newCrop) => setCrop(newCrop)}\r\n            onComplete={(c) => setCompletedCrop(c)}\r\n            aspect={1} // Square aspect ratio, remove for freeform\r\n          >\r\n            <img\r\n              ref={imgRef}\r\n              src={imageSrc}\r\n              alt=\"Crop preview\"\r\n              style={{ maxWidth: '100%', maxHeight: '400px' }}\r\n              onLoad={() => setCrop({ unit: '%', width: 90, height: 90, x: 5, y: 5 })}\r\n            />\r\n          </ReactCrop>\r\n        </div>\r\n        <div className=\"cropper-controls\">\r\n          <button onClick={onCancel} className=\"btn\">\r\n            Cancel\r\n          </button>\r\n          <button \r\n            onClick={handleCropComplete} \r\n            className=\"btn btn-primary\"\r\n            disabled={!completedCrop}\r\n          >\r\n            Apply Crop\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCropper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}