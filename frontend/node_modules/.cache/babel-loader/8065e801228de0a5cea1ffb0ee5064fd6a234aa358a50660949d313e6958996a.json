{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aaryan\\\\Documents\\\\coding\\\\image-gallery\\\\frontend\\\\src\\\\components\\\\ImageModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactModal from 'react-modal';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport './ImageModal.css';\n\n// Set the app element for react-modal\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nif (typeof window !== 'undefined') {\n  ReactModal.setAppElement('#root');\n}\nconst ImageModal = ({\n  image,\n  isOpen,\n  onClose,\n  onSave\n}) => {\n  _s();\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [cropMode, setCropMode] = useState(false);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 50,\n    height: 50\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n  const [rotation, setRotation] = useState(0);\n  const [scale, setScale] = useState(1);\n  const [originalImageData, setOriginalImageData] = useState(null);\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  useEffect(() => {\n    if (isOpen && image) {\n      setImageLoaded(false);\n      setCropMode(false);\n      setRotation(0);\n      setScale(1);\n      setCrop({\n        unit: '%',\n        width: 50,\n        height: 50\n      });\n      setCompletedCrop(null);\n      setOriginalImageData(null);\n    }\n  }, [isOpen, image]);\n  const handleImageLoad = e => {\n    const img = e.target;\n    setImageLoaded(true);\n\n    // Store original image data for reference\n    setOriginalImageData({\n      naturalWidth: img.naturalWidth,\n      naturalHeight: img.naturalHeight,\n      clientWidth: img.clientWidth,\n      clientHeight: img.clientHeight\n    });\n  };\n  const handleImageError = () => {\n    console.error('Failed to load image');\n    setImageLoaded(false);\n  };\n  const handleRotate = degrees => {\n    setRotation(prev => (prev + degrees) % 360);\n  };\n  const handleResize = () => {\n    const newScale = prompt('Enter scale factor (0.1 to 5):', scale);\n    if (newScale && !isNaN(newScale)) {\n      const scaleValue = parseFloat(newScale);\n      if (scaleValue >= 0.1 && scaleValue <= 5) {\n        setScale(scaleValue);\n      } else {\n        alert('Scale must be between 0.1 and 5');\n      }\n    }\n  };\n\n  // Function to fetch image with CORS headers\n  const fetchImageWithCORS = async url => {\n    try {\n      const response = await fetch(url, {\n        mode: 'cors',\n        credentials: 'omit'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch image');\n      }\n      const blob = await response.blob();\n      return URL.createObjectURL(blob);\n    } catch (error) {\n      console.error('Error fetching image:', error);\n      return url;\n    }\n  };\n  const getCroppedImg = async (imageElement, crop) => {\n    if (!crop || !imageElement) return null;\n    try {\n      const corsImageUrl = await fetchImageWithCORS(imageElement.src);\n      return new Promise(resolve => {\n        const image = new Image();\n        image.crossOrigin = 'anonymous';\n        image.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // Calculate actual pixel coordinates from percentage\n          let cropX, cropY, cropWidth, cropHeight;\n          if (crop.unit === '%') {\n            cropX = crop.x / 100 * image.naturalWidth;\n            cropY = crop.y / 100 * image.naturalHeight;\n            cropWidth = crop.width / 100 * image.naturalWidth;\n            cropHeight = crop.height / 100 * image.naturalHeight;\n          } else {\n            cropX = crop.x;\n            cropY = crop.y;\n            cropWidth = crop.width;\n            cropHeight = crop.height;\n          }\n\n          // Ensure crop coordinates are within image bounds\n          cropX = Math.max(0, Math.min(cropX, image.naturalWidth));\n          cropY = Math.max(0, Math.min(cropY, image.naturalHeight));\n          cropWidth = Math.max(1, Math.min(cropWidth, image.naturalWidth - cropX));\n          cropHeight = Math.max(1, Math.min(cropHeight, image.naturalHeight - cropY));\n          canvas.width = cropWidth;\n          canvas.height = cropHeight;\n          ctx.drawImage(image, cropX, cropY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);\n          resolve(canvas.toDataURL('image/png'));\n        };\n        image.onerror = () => {\n          console.error('Failed to load image for cropping');\n          resolve(null);\n        };\n        image.src = corsImageUrl;\n      });\n    } catch (error) {\n      console.error('Error in getCroppedImg:', error);\n      return null;\n    }\n  };\n  const handleCropComplete = async () => {\n    if (!imgRef.current || !completedCrop) {\n      alert('Please select a crop area first');\n      return;\n    }\n    try {\n      const croppedImage = await getCroppedImg(imgRef.current, completedCrop);\n      if (croppedImage) {\n        // Update the image source with the cropped version\n        imgRef.current.src = croppedImage;\n        setCropMode(false);\n        setRotation(0);\n        setScale(1);\n        setCompletedCrop(null);\n      } else {\n        alert('Crop failed. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error cropping image:', error);\n      alert('Error cropping image. Please try again.');\n    }\n  };\n  const handleSave = async () => {\n    if (!imgRef.current) return;\n    try {\n      const corsImageUrl = await fetchImageWithCORS(imgRef.current.src);\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onload = () => {\n        try {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // Set canvas dimensions\n          canvas.width = img.naturalWidth;\n          canvas.height = img.naturalHeight;\n\n          // Draw the current image (already includes any transformations from editing)\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          const dataURL = canvas.toDataURL('image/png');\n          onSave({\n            imageData: dataURL,\n            filename: image.filename\n          });\n        } catch (error) {\n          console.error('Error in canvas operations:', error);\n          alert('Error saving image.');\n        }\n      };\n      img.onerror = () => {\n        alert('Error loading image for saving.');\n      };\n      img.src = corsImageUrl;\n    } catch (error) {\n      console.error('Error saving image:', error);\n      alert('Error saving image. Please try again.');\n    }\n  };\n  const resetTransformations = () => {\n    setRotation(0);\n    setScale(1);\n    if (image) {\n      imgRef.current.src = image.file_path;\n    }\n  };\n  const onCropChange = newCrop => {\n    setCrop(newCrop);\n  };\n  const onCropComplete = crop => {\n    setCompletedCrop(crop);\n  };\n  return /*#__PURE__*/_jsxDEV(ReactModal, {\n    isOpen: isOpen,\n    onRequestClose: onClose,\n    className: \"image-modal\",\n    overlayClassName: \"image-modal-overlay\",\n    shouldCloseOnOverlayClick: false,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Edit Image: \", (image === null || image === void 0 ? void 0 : image.title) || (image === null || image === void 0 ? void 0 : image.original_filename)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        className: \"close-btn\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tool-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(90),\n            className: \"btn\",\n            children: \"\\uD83D\\uDD04 Rotate 90\\xB0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRotate(-90),\n            className: \"btn\",\n            children: \"\\uD83D\\uDD04 Rotate -90\\xB0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleResize,\n            className: \"btn\",\n            children: \"\\uD83D\\uDCCF Resize\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCropMode(!cropMode),\n            className: cropMode ? 'btn active' : 'btn',\n            children: [\"\\u2702\\uFE0F \", cropMode ? 'Cancel Crop' : 'Crop']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetTransformations,\n            className: \"btn\",\n            children: \"\\uD83D\\uDD04 Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), cropMode && completedCrop && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crop-controls\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCropComplete,\n            className: \"btn btn-primary\",\n            children: \"Apply Crop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-container\",\n        children: [!imageLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: \"Loading image...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), cropMode ? /*#__PURE__*/_jsxDEV(ReactCrop, {\n          crop: crop,\n          onChange: onCropChange,\n          onComplete: onCropComplete,\n          keepSelection: true,\n          ruleOfThirds: true,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imgRef,\n            src: image === null || image === void 0 ? void 0 : image.file_path,\n            alt: (image === null || image === void 0 ? void 0 : image.alt_text) || (image === null || image === void 0 ? void 0 : image.title) || (image === null || image === void 0 ? void 0 : image.original_filename),\n            onLoad: handleImageLoad,\n            onError: handleImageError,\n            crossOrigin: \"anonymous\",\n            style: {\n              maxWidth: '100%',\n              maxHeight: '60vh',\n              display: imageLoaded ? 'block' : 'none',\n              margin: '0 auto',\n              transform: `rotate(${rotation}deg) scale(${scale})`,\n              transformOrigin: 'center'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: imgRef,\n          src: image === null || image === void 0 ? void 0 : image.file_path,\n          alt: (image === null || image === void 0 ? void 0 : image.alt_text) || (image === null || image === void 0 ? void 0 : image.title) || (image === null || image === void 0 ? void 0 : image.original_filename),\n          onLoad: handleImageLoad,\n          onError: handleImageError,\n          crossOrigin: \"anonymous\",\n          style: {\n            maxWidth: '100%',\n            maxHeight: '60vh',\n            display: imageLoaded ? 'block' : 'none',\n            margin: '0 auto',\n            transform: `rotate(${rotation}deg) scale(${scale})`,\n            transformOrigin: 'center'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-info\",\n        children: image && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Original: \", image.width, \"\\xD7\", image.height]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Rotation: \", rotation, \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Scale: \", scale, \"x\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), completedCrop && cropMode && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Crop: \", Math.round(completedCrop.width), \"\\xD7\", Math.round(completedCrop.height)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"btn btn-secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSave,\n          className: \"btn btn-primary\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageModal, \"x1R6MKbnVkFcXFtfgmbY6XSinDY=\");\n_c = ImageModal;\nexport default ImageModal;\nvar _c;\n$RefreshReg$(_c, \"ImageModal\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactModal","ReactCrop","jsxDEV","_jsxDEV","Fragment","_Fragment","window","setAppElement","ImageModal","image","isOpen","onClose","onSave","_s","imageLoaded","setImageLoaded","cropMode","setCropMode","crop","setCrop","unit","width","height","completedCrop","setCompletedCrop","rotation","setRotation","scale","setScale","originalImageData","setOriginalImageData","imgRef","previewCanvasRef","handleImageLoad","e","img","target","naturalWidth","naturalHeight","clientWidth","clientHeight","handleImageError","console","error","handleRotate","degrees","prev","handleResize","newScale","prompt","isNaN","scaleValue","parseFloat","alert","fetchImageWithCORS","url","response","fetch","mode","credentials","ok","Error","blob","URL","createObjectURL","getCroppedImg","imageElement","corsImageUrl","src","Promise","resolve","Image","crossOrigin","onload","canvas","document","createElement","ctx","getContext","cropX","cropY","cropWidth","cropHeight","x","y","Math","max","min","drawImage","toDataURL","onerror","handleCropComplete","current","croppedImage","handleSave","dataURL","imageData","filename","resetTransformations","file_path","onCropChange","newCrop","onCropComplete","onRequestClose","className","overlayClassName","shouldCloseOnOverlayClick","children","title","original_filename","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","onComplete","keepSelection","ruleOfThirds","ref","alt","alt_text","onLoad","onError","style","maxWidth","maxHeight","display","margin","transform","transformOrigin","round","_c","$RefreshReg$"],"sources":["C:/Users/Aaryan/Documents/coding/image-gallery/frontend/src/components/ImageModal.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport './ImageModal.css';\r\n\r\n// Set the app element for react-modal\r\nif (typeof window !== 'undefined') {\r\n  ReactModal.setAppElement('#root');\r\n}\r\n\r\nconst ImageModal = ({ image, isOpen, onClose, onSave }) => {\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [cropMode, setCropMode] = useState(false);\r\n  const [crop, setCrop] = useState({ unit: '%', width: 50, height: 50 });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n  const [rotation, setRotation] = useState(0);\r\n  const [scale, setScale] = useState(1);\r\n  const [originalImageData, setOriginalImageData] = useState(null);\r\n  \r\n  const imgRef = useRef(null);\r\n  const previewCanvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (isOpen && image) {\r\n      setImageLoaded(false);\r\n      setCropMode(false);\r\n      setRotation(0);\r\n      setScale(1);\r\n      setCrop({ unit: '%', width: 50, height: 50 });\r\n      setCompletedCrop(null);\r\n      setOriginalImageData(null);\r\n    }\r\n  }, [isOpen, image]);\r\n\r\n  const handleImageLoad = (e) => {\r\n    const img = e.target;\r\n    setImageLoaded(true);\r\n    \r\n    // Store original image data for reference\r\n    setOriginalImageData({\r\n      naturalWidth: img.naturalWidth,\r\n      naturalHeight: img.naturalHeight,\r\n      clientWidth: img.clientWidth,\r\n      clientHeight: img.clientHeight\r\n    });\r\n  };\r\n\r\n  const handleImageError = () => {\r\n    console.error('Failed to load image');\r\n    setImageLoaded(false);\r\n  };\r\n\r\n  const handleRotate = (degrees) => {\r\n    setRotation(prev => (prev + degrees) % 360);\r\n  };\r\n\r\n  const handleResize = () => {\r\n    const newScale = prompt('Enter scale factor (0.1 to 5):', scale);\r\n    if (newScale && !isNaN(newScale)) {\r\n      const scaleValue = parseFloat(newScale);\r\n      if (scaleValue >= 0.1 && scaleValue <= 5) {\r\n        setScale(scaleValue);\r\n      } else {\r\n        alert('Scale must be between 0.1 and 5');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to fetch image with CORS headers\r\n  const fetchImageWithCORS = async (url) => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        mode: 'cors',\r\n        credentials: 'omit'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch image');\r\n      }\r\n      \r\n      const blob = await response.blob();\r\n      return URL.createObjectURL(blob);\r\n    } catch (error) {\r\n      console.error('Error fetching image:', error);\r\n      return url;\r\n    }\r\n  };\r\n\r\n  const getCroppedImg = async (imageElement, crop) => {\r\n    if (!crop || !imageElement) return null;\r\n\r\n    try {\r\n      const corsImageUrl = await fetchImageWithCORS(imageElement.src);\r\n      \r\n      return new Promise((resolve) => {\r\n        const image = new Image();\r\n        image.crossOrigin = 'anonymous';\r\n        \r\n        image.onload = () => {\r\n          const canvas = document.createElement('canvas');\r\n          const ctx = canvas.getContext('2d');\r\n          \r\n          // Calculate actual pixel coordinates from percentage\r\n          let cropX, cropY, cropWidth, cropHeight;\r\n          \r\n          if (crop.unit === '%') {\r\n            cropX = (crop.x / 100) * image.naturalWidth;\r\n            cropY = (crop.y / 100) * image.naturalHeight;\r\n            cropWidth = (crop.width / 100) * image.naturalWidth;\r\n            cropHeight = (crop.height / 100) * image.naturalHeight;\r\n          } else {\r\n            cropX = crop.x;\r\n            cropY = crop.y;\r\n            cropWidth = crop.width;\r\n            cropHeight = crop.height;\r\n          }\r\n\r\n          // Ensure crop coordinates are within image bounds\r\n          cropX = Math.max(0, Math.min(cropX, image.naturalWidth));\r\n          cropY = Math.max(0, Math.min(cropY, image.naturalHeight));\r\n          cropWidth = Math.max(1, Math.min(cropWidth, image.naturalWidth - cropX));\r\n          cropHeight = Math.max(1, Math.min(cropHeight, image.naturalHeight - cropY));\r\n\r\n          canvas.width = cropWidth;\r\n          canvas.height = cropHeight;\r\n\r\n          ctx.drawImage(\r\n            image,\r\n            cropX,\r\n            cropY,\r\n            cropWidth,\r\n            cropHeight,\r\n            0,\r\n            0,\r\n            cropWidth,\r\n            cropHeight\r\n          );\r\n\r\n          resolve(canvas.toDataURL('image/png'));\r\n        };\r\n        \r\n        image.onerror = () => {\r\n          console.error('Failed to load image for cropping');\r\n          resolve(null);\r\n        };\r\n        \r\n        image.src = corsImageUrl;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error in getCroppedImg:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleCropComplete = async () => {\r\n    if (!imgRef.current || !completedCrop) {\r\n      alert('Please select a crop area first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const croppedImage = await getCroppedImg(imgRef.current, completedCrop);\r\n      \r\n      if (croppedImage) {\r\n        // Update the image source with the cropped version\r\n        imgRef.current.src = croppedImage;\r\n        setCropMode(false);\r\n        setRotation(0);\r\n        setScale(1);\r\n        setCompletedCrop(null);\r\n      } else {\r\n        alert('Crop failed. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cropping image:', error);\r\n      alert('Error cropping image. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!imgRef.current) return;\r\n    \r\n    try {\r\n      const corsImageUrl = await fetchImageWithCORS(imgRef.current.src);\r\n      \r\n      const img = new Image();\r\n      img.crossOrigin = 'anonymous';\r\n      \r\n      img.onload = () => {\r\n        try {\r\n          const canvas = document.createElement('canvas');\r\n          const ctx = canvas.getContext('2d');\r\n          \r\n          // Set canvas dimensions\r\n          canvas.width = img.naturalWidth;\r\n          canvas.height = img.naturalHeight;\r\n          \r\n          // Draw the current image (already includes any transformations from editing)\r\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n          \r\n          const dataURL = canvas.toDataURL('image/png');\r\n          onSave({\r\n            imageData: dataURL,\r\n            filename: image.filename\r\n          });\r\n        } catch (error) {\r\n          console.error('Error in canvas operations:', error);\r\n          alert('Error saving image.');\r\n        }\r\n      };\r\n      \r\n      img.onerror = () => {\r\n        alert('Error loading image for saving.');\r\n      };\r\n      \r\n      img.src = corsImageUrl;\r\n    } catch (error) {\r\n      console.error('Error saving image:', error);\r\n      alert('Error saving image. Please try again.');\r\n    }\r\n  };\r\n\r\n  const resetTransformations = () => {\r\n    setRotation(0);\r\n    setScale(1);\r\n    if (image) {\r\n      imgRef.current.src = image.file_path;\r\n    }\r\n  };\r\n\r\n  const onCropChange = (newCrop) => {\r\n    setCrop(newCrop);\r\n  };\r\n\r\n  const onCropComplete = (crop) => {\r\n    setCompletedCrop(crop);\r\n  };\r\n\r\n  return (\r\n    <ReactModal\r\n      isOpen={isOpen}\r\n      onRequestClose={onClose}\r\n      className=\"image-modal\"\r\n      overlayClassName=\"image-modal-overlay\"\r\n      shouldCloseOnOverlayClick={false}\r\n    >\r\n      <div className=\"modal-header\">\r\n        <h3>Edit Image: {image?.title || image?.original_filename}</h3>\r\n        <button onClick={onClose} className=\"close-btn\">×</button>\r\n      </div>\r\n\r\n      <div className=\"modal-content\">\r\n        <div className=\"toolbar\">\r\n          <div className=\"tool-group\">\r\n            <button onClick={() => handleRotate(90)} className=\"btn\">\r\n              🔄 Rotate 90°\r\n            </button>\r\n            <button onClick={() => handleRotate(-90)} className=\"btn\">\r\n              🔄 Rotate -90°\r\n            </button>\r\n            <button onClick={handleResize} className=\"btn\">\r\n              📏 Resize\r\n            </button>\r\n            <button \r\n              onClick={() => setCropMode(!cropMode)} \r\n              className={cropMode ? 'btn active' : 'btn'}\r\n            >\r\n              ✂️ {cropMode ? 'Cancel Crop' : 'Crop'}\r\n            </button>\r\n            <button onClick={resetTransformations} className=\"btn\">\r\n              🔄 Reset\r\n            </button>\r\n          </div>\r\n\r\n          {cropMode && completedCrop && (\r\n            <div className=\"crop-controls\">\r\n              <button onClick={handleCropComplete} className=\"btn btn-primary\">\r\n                Apply Crop\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"canvas-container\">\r\n          {!imageLoaded && (\r\n            <div className=\"loading\">Loading image...</div>\r\n          )}\r\n          \r\n          {cropMode ? (\r\n            <ReactCrop\r\n              crop={crop}\r\n              onChange={onCropChange}\r\n              onComplete={onCropComplete}\r\n              keepSelection={true}\r\n              ruleOfThirds\r\n            >\r\n              <img\r\n                ref={imgRef}\r\n                src={image?.file_path}\r\n                alt={image?.alt_text || image?.title || image?.original_filename}\r\n                onLoad={handleImageLoad}\r\n                onError={handleImageError}\r\n                crossOrigin=\"anonymous\"\r\n                style={{\r\n                  maxWidth: '100%',\r\n                  maxHeight: '60vh',\r\n                  display: imageLoaded ? 'block' : 'none',\r\n                  margin: '0 auto',\r\n                  transform: `rotate(${rotation}deg) scale(${scale})`,\r\n                  transformOrigin: 'center'\r\n                }}\r\n              />\r\n            </ReactCrop>\r\n          ) : (\r\n            <img\r\n              ref={imgRef}\r\n              src={image?.file_path}\r\n              alt={image?.alt_text || image?.title || image?.original_filename}\r\n              onLoad={handleImageLoad}\r\n              onError={handleImageError}\r\n              crossOrigin=\"anonymous\"\r\n              style={{\r\n                maxWidth: '100%',\r\n                maxHeight: '60vh',\r\n                display: imageLoaded ? 'block' : 'none',\r\n                margin: '0 auto',\r\n                transform: `rotate(${rotation}deg) scale(${scale})`,\r\n                transformOrigin: 'center'\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"modal-footer\">\r\n        <div className=\"image-info\">\r\n          {image && (\r\n            <>\r\n              <span>Original: {image.width}×{image.height}</span>\r\n              <span>Rotation: {rotation}°</span>\r\n              <span>Scale: {scale}x</span>\r\n              {completedCrop && cropMode && (\r\n                <span>\r\n                  Crop: {Math.round(completedCrop.width)}×{Math.round(completedCrop.height)}\r\n                </span>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"modal-actions\">\r\n          <button onClick={onClose} className=\"btn btn-secondary\">\r\n            Cancel\r\n          </button>\r\n          <button onClick={handleSave} className=\"btn btn-primary\">\r\n            Save Changes\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </ReactModal>\r\n  );\r\n};\r\n\r\nexport default ImageModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}